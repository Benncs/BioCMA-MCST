#ifndef __MC_INIT_HPP__
#define __MC_INIT_HPP__

#include <cassert>
#include <common/execinfo.hpp>
#include <cstdint>
#include <mc/domain.hpp>
#include <mc/particles_container.hpp>
#include <mc/traits.hpp>
#include <mc/unit.hpp>
#include <memory>
#include <stdexcept>
#include <utility>
#include <span> 
#include <biocma_cst_config.hpp>

namespace MC
{

  void impl_init(double& total_mass,
                 uint64_t n_particles,
                 MonteCarloUnit& unit,
                 AutoGenerated::ContainerVariant&& container,  bool uniform_init);
  /**
   * @brief Helper function to initialize a MonteCarloUnit.
   *
   * Since MonteCarloUnit is not a generic type and the model type is resolved
   * at runtime, no constructors are defined to avoid carrying template
   * functions when using the unit. This function wraps the constructor
   * externally, providing a convenient way to initialize a MonteCarloUnit with
   * the appropriate model type and parameters.
   *
   * @tparam Model The particle model type, specified at compile time.
   *
   *
   * @return A unique pointer to the initialized MonteCarloUnit.
   */
  template <ModelType Model>
  std::unique_ptr<MonteCarloUnit> init(uint64_t n_particles,
                                       std::span<double> volumes,
                                       const NeighborsView<HostSpace>& neighbors,
                                       bool uniform_mc_init,
                                       double& total_mass)
  {
    // Kokkos::printf("Using model: %s\r\n",Model::); //TODO Add model's name to trait (optional)
    if constexpr (ConstWeightModelType<Model>)
    {
      // Kokkos::printf("Const Weights\r\n");
      std::cout<<  "\033[34m[Model]: " "Const Weights" "\033[0m" <<std::endl;

    }

    auto unit = std::make_unique<MonteCarloUnit>();
    unit->domain = ReactorDomain(volumes, neighbors);
    auto container = ParticlesContainer<Model>(n_particles);
    try
    {
      impl_init(total_mass, n_particles, *unit, std::move(container),uniform_mc_init);
    }
    catch (const std::runtime_error& e)
    {
      return nullptr;
    }

    return unit;
  }

  void post_init_weight(std::unique_ptr<MonteCarloUnit>& unit, double x0, double total_mass);

} // namespace MC

#endif //__MC_INIT_HPP__
