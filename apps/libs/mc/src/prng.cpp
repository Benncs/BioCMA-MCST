#include <biocma_cst_config.hpp>
#include <mc/prng/prng.hpp>
#ifdef NDEBUG
#  include <random>
#endif

namespace MC
{
  KPRNG::KPRNG(size_t _seed) : seed(_seed)
  {
    if (seed == 0)
    {
#ifndef NDEBUG
      seed = AutoGenerated::MC::debug_MC_RAND_DEFAULT_SEED;
#else
      seed = std::random_device{}();
#endif
    }
    random_pool = pool_type(this->seed);
  };

  Kokkos::View<double*, ComputeSpace>
  KPRNG::double_uniform(size_t n_sample, double a, double b) const
  {
    Kokkos::View<double*, ComputeSpace> view("sample", n_sample);
    auto local_pool = random_pool;
    Kokkos::parallel_for(
        "fill_sampl", n_sample, KOKKOS_LAMBDA(int&& i) {
          auto generator = local_pool.get_state();
          view(i) = generator.drand(a, b);
          local_pool.free_state(generator);
        });
    Kokkos::fence();

    return view;
  }
} // namespace MC