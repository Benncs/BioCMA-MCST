#include "biocma_cst_config.hpp"
#include "common/execinfo.hpp"
#include "core/case_data.hpp"
#include "core/global_initaliser.hpp"
#include "core/simulation_parameters.hpp"

#include <Kokkos_Core.hpp>
#include <api/api.hpp>
#include <iostream>
#include <memory>
#include <stdexcept>
#include <utility>

#ifdef NO_MPI
namespace MPI_W
{
    bool is_initialized()noexcept{return false;}
} //namespace MPI_W
#else
#include "mpi_w/message_t.hpp"
#endif

// namespace Api
// {
std::optional<std::unique_ptr<Handle>> Handle::init(uint32_t n_rank, uint32_t current_rank)
{
  auto h = std::make_unique<Handle>();
  ExecInfo info{};
  info.n_rank = n_rank;
  info.current_rank = current_rank;
  info.verbose = false;
  info.thread_per_process = n_rank ==0 ? 4:1;
  if (h)
  {
    h->_data.exec_info = info;
    h->id = 2025;
    if(AutoGenerated::FlagCompileTime::use_mpi)
    {
        if(!MPI_W::is_initialized())
        {
            std::cout<<"INIT MPI FIRST"<<std::endl;
            return std::nullopt;
        }
    }


    if (!Kokkos::is_initialized())
    {
      Kokkos::initialize(Kokkos::InitializationSettings() // (since 3.7)
                             .set_disable_warnings(false)
                             .set_num_threads(static_cast<int32_t>(info.thread_per_process))
                             .set_map_device_id_by("random"));
    }

    return std::optional<std::unique_ptr<Handle>>(std::move(h));
  }
  return std::nullopt;
}

std::optional<std::unique_ptr<Handle>> Handle::load(uint32_t n_rank, uint32_t current_rank)
{
  auto handle = init(n_rank, current_rank).value(); // FIXME
  auto exec = handle->_data.exec_info;

  Core::SimulationParameters mock_param = Core::SimulationParameters::m_default();
  mock_param.user_params.final_time = 1000;
  mock_param.user_params.initialiser_path = "";
  mock_param.user_params.model_name = "None";
  mock_param.user_params.delta_time = 0.1;
  mock_param.user_params.results_file_name = "./test_api_load";
  mock_param.results_file_name = "./test_api_load.h5";
  mock_param.user_params.number_exported_result = 05;
  mock_param.user_params.cma_case_path = "/home/benjamin/Documents/code/cpp/BioCMA-MCST/cma_data/0d_mono/";
  mock_param.flow_files = {mock_param.user_params.cma_case_path};

  auto opt_case = Core::load(exec, mock_param);

  if (opt_case)
  {
    handle->_data = std::move(*opt_case);
    handle->loaded=true;
    return handle;
  }

  return std::nullopt;
}

Handle::~Handle()
{
  std::cout << "destructing from c++" << std::endl;
}

bool Handle::exec()
{
  if (loaded || (registered && applied))
  {
    try
    {
      std::cout << "Running " << this->_data.exec_info.current_rank << "..." << std::endl;
      Core::exec(std::forward<Core::CaseData>(this->_data));
      return true;
    }
    catch (...)
    {
      return false;
    }
  }
  else
  {
    return false;
  }
}

void Handle::apply()
{
  if (loaded)
  {
    return;
  }

  if (!registered)
  {
    throw std::runtime_error("Register first");
    return;
  }

  Core::GlobalInitialiser gi(_data.exec_info, _data.params);
  auto t = gi.init_transitionner();

  auto __simulation = gi.init_simulation();
  if ((!t.has_value() && !__simulation.has_value()) || !gi.check_init_terminate())
  {
    throw std::runtime_error("Error apply");
  }
  _data.simulation = std::move(*__simulation);
  _data.transitioner = std::move(*t);
  applied = true;
}

void Handle::register_parameters()
{
  if (loaded)
  {
    return;
  }
  Core::SimulationParameters mock_param = Core::SimulationParameters::m_default();
  mock_param.user_params.final_time = 1000;
  mock_param.user_params.initialiser_path = "";
  mock_param.user_params.model_name = "None";
  mock_param.user_params.delta_time = 0.1;
  mock_param.user_params.number_particle = 1000;
  mock_param.user_params.results_file_name = "./test_api_new";
  mock_param.results_file_name = "./test_api_new.h5";
  mock_param.user_params.number_exported_result = 50;
  mock_param.user_params.cma_case_path = "/home/benjamin/Documents/code/cpp/BioCMA-MCST/cma_data/0d_mono/";
  mock_param.flow_files = {mock_param.user_params.cma_case_path};

  this->_data.params = mock_param;
  registered = true;
}

// void Handle::register_parameters(Core::SimulationParameters &&params)
// {
//   this->_data.params = std::move(params);
// }
// } //namespace Api
