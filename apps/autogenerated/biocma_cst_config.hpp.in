
#ifndef __BIOMC__AUTOGENERATED_CONFIG_HPP__
#define __BIOMC__AUTOGENERATED_CONFIG_HPP__

/* ---------------------------------------------------------
 *                  BIOCMA_MC ST
 *
 * This file has been autogenerated by Meson during project
 * configuration.
 *
 * Be careful when modifying values.
 * ---------------------------------------------------------
 */


#include <cstddef>
#include <cstdint>
#include <string_view>
// clang-format off
#mesondefine _BIOMC_VERSION_MAJOR
#mesondefine _BIOMC_VERSION_MINOR
#mesondefine _BIOMC_VERSION_DEV
#mesondefine _BIOMC_BUILD_MODE

namespace AutoGenerated
{

    constexpr std::string_view cma_data_folder_path = @cma_data_folder_path@; ///<Default folder to find CMA for simulation
    constexpr std::string_view result_dir_path = @result_dir_path@; ///<Default folder to store simulation results
    constexpr std::string_view expected_cma_case_name = "/cma_case"; ///<Default folder to store simulation results

    constexpr std::size_t probe_buffer_size = @probe_buffer_size@; ///<Default size for probes buffer

    namespace MC
    {
        constexpr double default_particle_container_allocation_factor = @default_particle_container_allocation_factor@;
        constexpr std::size_t MC_MAX_PARTICLE_BUFFER = @MC_MAX_PARTICLE_BUFFER@;
        constexpr uint64_t debug_MC_RAND_DEFAULT_SEED = @debug_MC_RAND_DEFAULT_SEED@;
        constexpr double dead_particle_ratio_threshold = @_dead_particle_ratio_threshold@;
        constexpr double shink_ratio = @shrink_ratio@;
        constexpr double default_MC_buffer_ratio =
            1; ///< Buffer size = ceil(list.size()*buffer_ratio), 0.6 is fine, for
            ///< high division rate or stiff increase to 1
    } // namespace MC
    


    /**
    * @namespace FlagCompileTime
    * @brief Namespace containing compile-time flags for application configuration.
    *
    * This namespace defines compile-time constants that control specific behavior
    * of the application, such as verbosity and output redirection. These flags are
    * set based on predefined macros and allow for conditional compilation.
    */
    namespace FlagCompileTime
    {
        constexpr bool __f__redirect__ = @__f__redirect__@; ///< Controls whether standard output should be redirected.
        constexpr bool verbose = @__f_verbose__@; ///< Controls whether verbose logging is enabled.
        constexpr bool dump_particle_state = @dump_particle_state@; ///< Save particle state when exporting concentration
        constexpr bool use_probe = @use_probe@; ///< Save and use probe during simulation to track time events
        constexpr bool const_number_simulation = @const_number_simulation@; ///< TODO Not used
        constexpr bool enable_event_counter = @enable_event_counter@; ///< Record and export tallies during simulation

        #ifdef NO_MPI
        constexpr bool use_mpi = false;
        #else
        constexpr bool use_mpi = true;
        #endif

        #ifdef USE_CEAREAL
        constexpr bool use_cereal_serde = true;
        #else
        constexpr bool use_cereal_serde = false;
        #endif
    } // namespace FlagCompileTime

} //namespace AutoGenerated
// clang-format on
#endif
